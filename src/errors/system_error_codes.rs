use std::fmt::{Display, Formatter};

#[derive(Debug)]
#[allow(dead_code)]
pub enum SystemErrorCodes {
    AddrInUse,
    AddrNotAvailable,
    AlreadyExists,
    ArgumentListTooLong,
    BadDateFormat,
    BadCompressedPacketHeader,
    BrokenPipe,
    CantParseServerVersion,
    CleartextPluginDisabled,
    ConnectionAborted,
    ConnectionClosed,
    ConnectionRefused,
    ConnectionReset,
    CrossesDevices,
    DbConnectionError,
    DbConnectionTimedOut,
    Deadlock,
    DirectoryNotEmpty,
    ExecutableFileBusy,
    FeatureRequired,
    FileTooLarge,
    FilesystemLoop,
    FilesystemQuotaExceeded,
    FromRow,
    FromValue,
    HostUnreachable,
    Interrupted,
    Invalid,
    InvalidDateValue,
    InvalidData,
    InvalidFilename,
    InvalidInput,
    InvalidParamValue,
    InvalidPoolConstraints,
    Io,
    IsADirectory,
    LocalInfile,
    MissingNamedParam,
    MixedParams,
    MysqlOldPasswordDisabled,
    NamedParamsForPositionalQuery,
    NamedPipesDisabled,
    NestedTransaction,
    NetworkDown,
    NetworkUnreachable,
    NoClientSslFlagFromServer,
    NoKeyFound,
    NotADirectory,
    NotConnected,
    NotFound,
    NotSeekable,
    Other,
    OutOfMemory,
    OutOfRangeDateValue,
    PacketOutOfOrder,
    PacketTooLarge,
    Parse,
    PermissionDenied,
    PoolDisconnected,
    ReadOnlyFilesystem,
    ReadOnlyTransNotSupported,
    ResourceBusy,
    ServerError,
    StaleNetworkFileHandle,
    StmtParamsMismatch,
    StorageFull,
    TimedOut,
    Tls,
    TooManyLinks,
    Uncategorized,
    UnexpectedEof,
    UnexpectedPacket,
    UnknownAuthPlugin,
    UnknownParameter,
    Unsupported,
    UnsupportedScheme,
    WouldBlock,
    WriteZero
}

impl Display for SystemErrorCodes {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        write!(f, "{:?}", self)
    }
}
